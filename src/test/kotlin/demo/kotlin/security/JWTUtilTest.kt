package demo.kotlin.security

import demo.kotlin.model.User
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.BeforeAll
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.TestInstance
import org.junit.jupiter.api.TestInstance.Lifecycle
import java.time.LocalDateTime
import java.time.ZoneId
import java.util.*

private const val TOKEN = "eyJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJST0xFX1VTRVIiXSwiZW5hYmxlIjp0cnVlLCJ" +
        "zdWIiOiJGcmVkIiwiaWF0IjoxNTQ3NTA0MTEwLCJleHAiOjE1NDc1MzI5MTB9._QOBJMLWNcFSzDwsiZbIJ5gmXG1tQZ" +
        "90jP4omKJIey84l7ZQ72sN_7WdN94XjDJsgZ4SoDJL4MtTpmy_o3wS1A"

@TestInstance(Lifecycle.PER_CLASS)
class JWTUtilTest {
    private lateinit var jwtUtil: JWTUtil

    @BeforeAll
    private fun beforeAll() {
        jwtUtil = JWTUtil("mysecret", "28800")
    }

    @Test
    fun `Verify generateToken generates a token, basic one !`() {
        val user = User("Fred", "password")
        val jwtToken = jwtUtil.generateToken(user)
        assertThat(jwtToken).isNotNull().isNotEmpty()
    }

    @Test
    fun `Verify a token generated by JwtUtil is valid`() {
        assertThat(jwtUtil.isTokenExpired(TOKEN,
                Date.from(
                        LocalDateTime.of(2019, 1, 14, 23, 30)
                                .atZone(ZoneId.of("Europe/Paris")).toInstant())))
                .isFalse()
        assertThat(jwtUtil.isTokenExpired(TOKEN,
                Date.from(
                        LocalDateTime.of(2019, 1, 15, 8, 0)
                                .atZone(ZoneId.of("Europe/Paris")).toInstant())))
                .isTrue()
    }
}